// Copyright (C) 2021  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/19/2022 18:25:08"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_IN;
reg PIN_M9;
reg RESET;
reg RST_DEBOUNCER;
// wires                                               
wire [7:0] CONT_LED;
wire JMP;
wire [15:0] MEM;
wire [6:0] MEM_DIS0;
wire [6:0] MEM_DIS1;
wire [6:0] MEM_DIS2;
wire [6:0] MEM_DIS3;
wire [1:0] OP_ULA;
wire [3:0] Operando;
wire [3:0] R1_OUT;
wire [3:0] R2_OUT;
wire RESET_RG;
wire [6:0] RG_DIS1;
wire [6:0] RG_DIS2;
wire [3:0] ULA_IN;
wire [3:0] ULA_OUT;

// assign statements (if any)                          
CPU i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_IN(CLOCK_IN),
	.CONT_LED(CONT_LED),
	.JMP(JMP),
	.MEM(MEM),
	.MEM_DIS0(MEM_DIS0),
	.MEM_DIS1(MEM_DIS1),
	.MEM_DIS2(MEM_DIS2),
	.MEM_DIS3(MEM_DIS3),
	.OP_ULA(OP_ULA),
	.Operando(Operando),
	.PIN_M9(PIN_M9),
	.R1_OUT(R1_OUT),
	.R2_OUT(R2_OUT),
	.RESET(RESET),
	.RESET_RG(RESET_RG),
	.RG_DIS1(RG_DIS1),
	.RG_DIS2(RG_DIS2),
	.RST_DEBOUNCER(RST_DEBOUNCER),
	.ULA_IN(ULA_IN),
	.ULA_OUT(ULA_OUT)
);
initial 
begin 
#1000000 $finish;
end 

// CLOCK_IN
initial
begin
	repeat(16)
	begin
		CLOCK_IN = 1'b0;
		CLOCK_IN = #30000 1'b1;
		# 30000;
	end
	CLOCK_IN = 1'b0;
	CLOCK_IN = #30000 1'b1;
end 

// RESET
initial
begin
	RESET = 1'b1;
	RESET = #40000 1'b0;
	RESET = #940000 1'b1;
end 

// PIN_M9
initial
begin
	PIN_M9 = 1'b0;
end 

// RST_DEBOUNCER
initial
begin
	RST_DEBOUNCER = 1'b0;
end 
endmodule

